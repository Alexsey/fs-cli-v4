/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IExchangeEventsInterface extends ethers.utils.Interface {
  functions: {};

  events: {
    "DFRCharged(int256,int256,int256,int256)": EventFragment;
    "ExchangeConfig1Changed(int256,int256,uint256,uint256,int256,uint256,int256)": EventFragment;
    "ExchangeConfig2Changed(int256,int256,int256,int256,int256,int256)": EventFragment;
    "ExchangeStateChanged(uint8,int256)": EventFragment;
    "IncentivesExchangeCallFailed(address,uint256)": EventFragment;
    "Liquidate(address,address,uint256)": EventFragment;
    "LiquidityAdded(address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "LiquidityRemoved(address,uint256,uint256,uint256,uint256)": EventFragment;
    "PositionChanged(address,uint256,uint256,int256,int256,int256,int256)": EventFragment;
    "TimeFeeCharged(int256,int256,int256,int256)": EventFragment;
    "TrancheAutoDeleveraged(uint8,uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DFRCharged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExchangeConfig1Changed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExchangeConfig2Changed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExchangeStateChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "IncentivesExchangeCallFailed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TimeFeeCharged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrancheAutoDeleveraged"): EventFragment;
}

export class IExchangeEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IExchangeEventsInterface;

  functions: {};

  callStatic: {};

  filters: {
    DFRCharged(
      assetToMove?: null,
      poolAsset?: null,
      totalAssetLong?: null,
      totalAssetShort?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        assetToMove: BigNumber;
        poolAsset: BigNumber;
        totalAssetLong: BigNumber;
        totalAssetShort: BigNumber;
      }
    >;

    ExchangeConfig1Changed(
      tradeFeeFraction?: null,
      timeFee?: null,
      maxLeverage?: null,
      minCollateral?: null,
      treasuryFraction?: null,
      removeLiquidityFee?: null,
      tradeLiquidityReserveFactor?: null
    ): TypedEventFilter<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        tradeFeeFraction: BigNumber;
        timeFee: BigNumber;
        maxLeverage: BigNumber;
        minCollateral: BigNumber;
        treasuryFraction: BigNumber;
        removeLiquidityFee: BigNumber;
        tradeLiquidityReserveFactor: BigNumber;
      }
    >;

    ExchangeConfig2Changed(
      dfrRate?: null,
      liquidatorFrac?: null,
      maxLiquidatorFee?: null,
      poolLiquidationFrac?: null,
      maxPoolLiquidationFee?: null,
      adlFeePercent?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        dfrRate: BigNumber;
        liquidatorFrac: BigNumber;
        maxLiquidatorFee: BigNumber;
        poolLiquidationFrac: BigNumber;
        maxPoolLiquidationFee: BigNumber;
        adlFeePercent: BigNumber;
      }
    >;

    ExchangeStateChanged(
      exchangeState?: null,
      pausePrice?: null
    ): TypedEventFilter<
      [number, BigNumber],
      { exchangeState: number; pausePrice: BigNumber }
    >;

    IncentivesExchangeCallFailed(
      trader?: string | null,
      incentivesTradeSize?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { trader: string; incentivesTradeSize: BigNumber }
    >;

    Liquidate(
      liquidator?: string | null,
      trader?: string | null,
      liquidatorPayout?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { liquidator: string; trader: string; liquidatorPayout: BigNumber }
    >;

    LiquidityAdded(
      router?: string | null,
      provider?: string | null,
      assetAmount?: null,
      stableAmount?: null,
      liquidityTokenAmount?: null,
      liquidityTokenSupply?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        router: string;
        provider: string;
        assetAmount: BigNumber;
        stableAmount: BigNumber;
        liquidityTokenAmount: BigNumber;
        liquidityTokenSupply: BigNumber;
      }
    >;

    LiquidityRemoved(
      provider?: string | null,
      assetAmount?: null,
      stableAmount?: null,
      liquidityTokenAmount?: null,
      liquidityTokenSupply?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        provider: string;
        assetAmount: BigNumber;
        stableAmount: BigNumber;
        liquidityTokenAmount: BigNumber;
        liquidityTokenSupply: BigNumber;
      }
    >;

    PositionChanged(
      trader?: string | null,
      tradeFee?: null,
      traderPayout?: null,
      previousAsset?: null,
      previousStable?: null,
      newAsset?: null,
      newStable?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        trader: string;
        tradeFee: BigNumber;
        traderPayout: BigNumber;
        previousAsset: BigNumber;
        previousStable: BigNumber;
        newAsset: BigNumber;
        newStable: BigNumber;
      }
    >;

    TimeFeeCharged(
      longAssetCharged?: null,
      shortAssetCharged?: null,
      totalAssetLong?: null,
      totalAssetShort?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        longAssetCharged: BigNumber;
        shortAssetCharged: BigNumber;
        totalAssetLong: BigNumber;
        totalAssetShort: BigNumber;
      }
    >;

    TrancheAutoDeleveraged(
      trancheId?: BigNumberish | null,
      shareClass?: BigNumberish | null
    ): TypedEventFilter<
      [number, BigNumber],
      { trancheId: number; shareClass: BigNumber }
    >;
  };

  estimateGas: {};

  populateTransaction: {};
}
